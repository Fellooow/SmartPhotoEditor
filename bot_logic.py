import asyncio
import logging
import datetime
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.storage import FSMContext
from aiogram.utils.exceptions import BotBlocked
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from utils import States

from aiogram.dispatcher.filters import Text

import inline_keyboard
import bd

logging.basicConfig(level=logging.INFO)

downloads_photo_directory = 'C:/Users/Egor/PycharmProjects/CourseWork(5 term)/img/photo'
downloads_style_directory = 'C:/Users/Egor/PycharmProjects/CourseWork(5 term)/img/style'
done_img = 'C:/Users/Egor/PycharmProjects/CourseWork(5 term)/best.png'

bot_api_token = '5423666614:AAHL5Wf64WZziSamjVUE5S7kQg2a14Eg3D8'
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=bot_api_token)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot, storage=MemoryStorage())


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands='start')
async def start_menu(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}.\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?',
                         reply_markup=inline_keyboard.keyboard)
    user_id = message.from_user.id
    print(user_id)
    bd.execute_query(bd.create_connection, bd.add_user_query)

@dp.message_handler(Text(equals='–£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ç–æ'))
async def get_photo_to_upscale(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å')


@dp.message_handler(Text(equals='–°—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ'))
async def get_photo_to_stylize(message: types.Message):
    await message.answer(text='–¢–∞–∫-—Å...',
                         reply_markup=inline_keyboard.keyboard_photo)


@dp.message_handler(Text(equals='–£–±—Ä–∞—Ç—å —Ñ–æ–Ω —Å —Ñ–æ—Ç–æ'))
async def get_photo_to_delete_bg(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–±—Ä–∞—Ç—å —Ñ–æ–Ω')


@dp.message_handler(Text(equals='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ'))
async def set_wait_content_state(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ:")
    await States.WAIT_PHOTO_STATE.set()   # Set state


@dp.message_handler(Text(equals='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–ª—å'))
async def set_wait_style_state(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—Ç–∏–ª—å –¥–ª—è —Ñ–æ—Ç–æ:")
    await States.WAIT_STYLE_STATE.set()


@dp.message_handler(state=States.WAIT_PHOTO_STATE, content_types=types.ContentTypes.PHOTO)
async def get_photo(message: types.Message, state: FSMContext):
    photo_abspath = '{}/photos/{}.jpg'.format(downloads_photo_directory, datetime.datetime.now().strftime(
        "%Y%m%d-%H%M%S-%f"))  # Downloaded photo path to downloads/photos
    user_id = message.from_user.id
    print(user_id)

    content_id = message.photo[-1].file_id
    content_info = await bot.get_file(content_id)
    path = content_info.file_path
    await bot.download_file(path, photo_abspath)
    await state.finish()

    print(photo_abspath)

    await message.answer('–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Ñ–æ—Ç–æüòâ', reply_markup=inline_keyboard.keyboard)
    bd.execute_query(bd.create_connection, bd.add_content_query)
    #return photo_abspath


@dp.message_handler(state=States.WAIT_STYLE_STATE, content_types=types.ContentTypes.PHOTO)
async def get_photo_style(message: types.Message, state: FSMContext):
    style_abspath = '{}/photos/{}.jpg'.format(downloads_style_directory, datetime.datetime.now().strftime(
        "%Y%m%d-%H%M%S-%f"))  # Downloaded photo path to downloads/photos

    style_id = message.photo[-1].file_id
    style_info = await bot.get_file(style_id)
    style_path = style_info.file_path
    await bot.download_file(style_path, style_abspath)
    await state.finish()

    print(style_abspath)
    await message.answer('–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Ñ–æ—Ç–æüòâ', reply_markup=inline_keyboard.stylish_level_keyboard)
    bd.execute_query(bd.create_connection, bd.add_style_query)

@dp.message_handler(Text(equals='–°–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'))
async def compute(message: types.Message):
    await bot.send_message(chat_id='486325118', text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏\n'
                                                     '1 - –°–ª–∞–±—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏\n'
                                                     '2 - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏\n'
                                                    '3 - –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏\n'
                                                    '4 - –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏')
    await bot.send_photo(message.chat.id, done_img)

@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
